What is shell script?
1. A text file
2. with instructions
3. executables	

Normally shells are interactive. It means shell accept command from you (via keyboard) and execute them. But if you use command one by one (sequence of 'n' number of commands) , the you can store this
sequence of command to text file and tell the shell to execute this text file instead of entering the commands. This is know as shell script.

Shell Script is series of command written in plain text file. 

Variables:-
Two types of variables
    1. System Variables 	
    	Ex:- SHELL, BASH, COLUMNS, HOME .....etc......
    to use $ is used before variable name. 
    #echo $SHELL
    2. User Define Variables 
    Syntax:
    		variable name=value
    a. 'value' is assigned to given 'variable name' and Value must be on right side = sign.
    b. Variable name must begin with Alphanumeric character or underscore character (_), followed by one or more Alphanumeric character.
    c. Don't put spaces on either side of the equal sign when assigning value to variable.
    	ex:- $no =10 and	$no= 10 and $no = 10 will throw errors.
    d. Variables are case-sensitive, just like filename in Linux.
    e. You can define NULL variable as follows (NULL variable is variable which has no value at the time of definition) For e.g.
    	$ vech=
    	$ vech=""
    f. Do not use ?,* etc, to name your variable names.

UDV can access using $ sign
	syntax:		$variablename
Note:- Do not try $ echo vech, as it will print vech instead its value

echo Command:- 
Use echo command to display text or value of variable.

Options
-n Do not output the trailing new line.
-e Enable interpretation of the following backslash escaped characters in the strings:
\a alert (bell)
\b backspace
\c suppress trailing new line

For e.g. $ echo -e "An apple a day keeps away \a\t\tdoctor\n"

Shell Arithmetic:-
Syntax:
expr op1 math-operator op2
Examples:
$ expr 1 + 3
$ expr 2 - 1
$ expr 10 / 2
$ expr 20 % 3
$ expr 10 \* 3
$ echo `expr 6 + 3`
before expr keyword we used ` (back quote: To execute command) sign not the (single quote i.e. ') sign.
 Here if you use double quote or single quote, it will NOT work
For e.g.
$ echo "expr 6 + 3" # It will print expr 6 + 3
$ echo 'expr 6 + 3' # It will print expr 6 + 3

Exit Status
By default in Linux if particular command/shell script is executed, it return two type of values which is used to see whether command or shell script executed is successful or not.
(1) If return value is zero (0), command is successful.
(2) If return value is nonzero, command is not successful or some sort of error executing command/shell
script.
This value is know as Exit Status.
Ex:- 
$ ls
$ echo $?
It will print 0 to indicate command is successful.

The read Statement:-
Use to get input (data from user) from keyboard and store (data) to variable.
Syntax:
read variable1, variable2,...variableN
for example refer read.sh

Wild cards (Filename Shorthand or metaCharacterso)
1. * Matches any string or group of characters.
Ex:- 1. $ls *		 will show all files
     2. $ls a*		 will show all files starting with a
     3. $ls *.c		 will show all files having extension is .c
2. ? matches any single character
Ex:- 1. $ls ? 		 will show those files whose names are one character long
     2. $ls fo?		 will show all files whose names are 3 character long and file name begin with fo
3. [...] matches any one of the enclosed characters
Ex:- $ls [abc]*will show all files beginning with letters a,b,c

More command on one command line
Syntax:
command1;command2
To run two command with one command line.


command Line Processing:-
$ ls grate_stories_of
What are commands? 
The first word on command line is, ls - is name of the command to be executed.
Everything else on command line is taken as arguments to this command.

command Line arguments required?
1. Telling the command/utility which option to use.
2. Informing the utility/command which file or group of files to process (reading/writing of files).

How to access command line arguments into the script?
Ans:- Using $agrv1 $argv2 .....
Example:-
	1. $0 is script name
	2. $1 is first argument
	3. $2 is second argument
	4. All of them are :- $* or $@
refer commArg.sh


Redirection of Standard output/input i.e. Input - Output redirection:- 

cat > hello.sh <<MY_PROGRAM
It will create a file with the name hello.sh, and it will add the contents whatever you entered from the command prompt, but at the end you should add MY_PROGRAM to mark the eof of the file.

if we won't pass MY_PROGRAM at the end, the it will through a warning as,
bash: warning: here-document at line 35 delimited by end-of-file (wanted `MY_PROGRAM')

#what is difference between $?, $*, $#, $@?
#$?: This will give the status of command being executed, if command executaion is successful it will give 0, if fails, it will give negative value.
#$*: It will form string for command line arguments.
#$@: It will make array of command line arguments.
#$#: It will give total number of command line arguments.


NAME[0]="Zara"
NAME[1]="Qadir"
NAME[2]="Mahnaz"
NAME[3]="Ayan"
NAME[4]="Daisy"
echo "First Index: ${NAME[0]}"
echo "Second Index: ${NAME[1]}"

#You can access all the items in an array in one of the following ways −

echo ${NAME[*]}
echo ${NAME[@]}


pipes:-
	A pipe is a way to connect the output of one program to the input of another program without any temporary file.
	Pipe Defined as: "A pipe is nothing but a temporary storage place where the output of one command is stored and then passed as the input for second command. 

syntax:
command1 | command2
Ex:- 
1. $ ls | more 	output of ls command is given as intput to more command so that output is printed one screen full page at a time.
2. $ who | sort   output of who command is given as input to sort command so that it will print sorted list of the users
3. $ who | sort > user_list 	same as above, except sorted list is send to user_list file.
4. $ ls -l | wc -l	Output of ls command is given as input to wc command So that it will print number of files in current directory.

What is Processes?
	"A process is program (command given by user) to perform specific Job. In Linux when you start process, it gives a number to process (called PID or process-id), PID starts from 0 to 65535."
	"An instance of running command is called process and the number printed by shell is called process-id (PID), this PID can be use to refer specific running process."

1. ps :- To see currenty running process.
2. kill (PID) :- To stop any process by PID
3. killall {process_name} :- To stop processes by name
4. ps -ag :- To get information about all running process
5. kill 0 :- To stop all process except your shell.
6. linux-command & :- for background processing
7. top :- to see currently running process
8. pstrdd:- To display a tree of process.



-eq is equal to
-ne is not equal to
-lt is less than
-le is less than or equal to
-gt is greater than
-ge is greater than or equal to

t
-s file   Non empty file
-f file   Is File exist or normal file and not a directory
-d dir    Is Directory exist and not a file
-w file   Is writeable file
-r file   Is read-only file
-x file   Is file is executable


! expression  Logical NOT
expression1 -a expression2  	Logical AND
expression1 -o expression2	Logical OR

environment variables
%NEW_VAR="YES"
%echo $NEW_VAR
%export NEW_VAR
%env
Now it will show the env variable NEW_VAR in the env.

continuing line:- \

exit statues:-
$? It will keep exit status of the previous executed command.
0 is true

%ls /does/not/exit/
%echo $?
1
%echo $?

Logic: test
test command or [ expr ]
test command or [ expr ] is used to see if an expression is true, and if it is true it return zero(0), otherwise
returns nonzero for false.
Syntax:
test expression OR [ expression ]


%test 1 -lt 10
%echo $?
0
%test 1 == 10
%echo $?
1

condition check:-
1. []
[1 -lt 10]

2. [[]]
[["This is string"]]

3. (())
((1 < 10))

$(( )) for Math
% echo $(( 1 + 2 ))
3
% echo $(( 2 * 3 ))
6
% echo $(( 1 / 3 ))
0


[ -f /etc/passwd ]
[ ! –f /etc/passwd ]
[ -f /etc/passwd –a –f /etc/shadow ]
[ -f /etc/passwd –o –f /etc/shadow ]

$(( )) for Math
% echo $(( 1 + 2 ))
3
% echo $(( 2 * 3 ))
6
% echo $(( 1 / 3 ))
0


Logic:- if
if condition:-

if something
then
   :
   :
elif something-else
then
   :
   :
else
   :
   :
fi

for:-

for Loop
Syntax:
for { variable name } in { list }
do

	execute one for each item in the list until the list is not finished (And repeat all statement between do and done)

done


for i in 1 2 3
do
        echo $i
done

C-style for
for (( expr1    ;
       expr2    ;
       expr3    ))
do
  list
done

Logic:- while 

Syntax:
while [ condition ]
do
	command1
	command2
	command3
	..
	....
done

while something
do
  :

done


Introduction
After learning basis of shell scripting, its time to learn more advance features of shell scripting/command
such as:
* Functions
* User interface
* Conditional execution
* File Descriptors
* traps
* Multiple command line args handling etc

a. /dev/null - Use to send unwanted output of program

This is special Linux file which is used to send any unwanted output from program/command.
Syntax:
command > /dev/null

b. Local and Global Shell variable (export command).
	Normally all our variables are local. Local variable can be used in same shell, if you load another copy of shell (by typing the /bin/bash at the $ prompt) then new shell ignored all old shell's variable. 

example:- 
$ vech=Bus
$ echo $vech
Bus
$ /bin/bash
$ echo $vech (It will print empty line).

Global shell defined as:
"You can copy old shell's variable to new shell (i.e. first shells variable to seconds shell), such variable is
know as Global Shell variable."

To set global varible you have to use export command.
Syntax:
export variable1, variable2,.....variableN

Conditional execution i.e. && and ||
The control operators are && (read as AND) and || (read as OR). The syntax for AND list is as follows
Syntax:
command1 && command2
command2 is executed if, and only if, command1 returns an exit status of zero.
The syntax for OR list as follows
Syntax:
command1 || command2
command2 is executed if and only if command1 returns a non-zero exit status.
You can use both as follows
Syntax:
command1 && comamnd2 if exist status is zero || command3 if exit status is non-zero

I/O Redirection and file descriptors

direction opertor:-I/O redirectors are used to send output of command to file or to read input from file.

By default in Linux every program has three files associated with it, (when we start our program these
three files are automatically opened by your shell). The use of first two files (i.e. stdin and stdout) , are
already seen by us. The last file stderr (numbered as 2) is used by our program to print error on screen.

You can redirect the output from a file descriptor directly to file with following syntax
Syntax:
file-descriptor-number>filename

1. > (write mode).
It will direct the contents into the file.

2. >> (Append mode)
It will append the contents at the end of the file.

3. 2> (error) 	
It will direct the error
no space are allowed between 2 and >, The 2>er directs the standard error output to file.
The 1>&2 at the end of echo statement (refer std_in_out_err.sh file), directs the
standard output (stdout) to standard error (stderr) device.
Syntax:
from>&destination



4. <<
It redirect the contents to the command
ex:- cat <<file.txt

5. cat > text.txt 2>&file_err.txt

6. sorting file contents (refer sname file)
	sort < sname > sort_sname
7. convert lower case to upper using tr
	tr "[a-z]" "[A-Z]" < sname > caps_sname

Functions:-

To define function use following syntax:
Syntax:
function-name( )
    {
        command1
        command2
        .....
        ...
        commandN
        return
    }
Where function-name is name of you function, that executes series of commands. A return statement will
terminate the function. Example:
Type SayHello() at $ prompt as follows
$ SayHello()
{
    echo "Hello $LOGNAME, Have nice computing"
    return
}
To execute this SayHello() function just type it name as follows:
$ SayHello
Hello vivek, Have nice computing.
This way you can call function. 
Note that after restarting your computer you will loss this SayHello() function, since its created for current session only.

To overcome this problem, add your function to /etc/bashrc file. The function is available to all user in your system.

If you want to add particular function to particular user then open .bashrc file in users home directory. 

User Interface and dialog utility-Part I:-

Good program/shell script must interact with users. You can accomplish this as follows:
(1) Use command line arguments (args) to script when you want interaction i.e. pass command line args
to script.
(2) Use statement like echo and read to read input into variable from the prompt.

The shift Command:-
The shift command moves the current values stored in the positional parameters (command line args) to the left one position.
refer cmd_shift.sh
You can also move the positional parameters over more than one place by specifying a number with the shift command.

You can use shift command to parse the command line (args) option. 
refer cmd_shift.sh (part-2).


getopts command
This command is used to check valid command line argument are passed to script. Usually used in while loop.
Syntax:
getopts {optstring} {variable1}
for example refer getopts.sh

Prepering for Quick Tour of essential utilities:- 
for below example's refer a file with the name sname.
Selecting portion of a file using cut utility:-
Syntax:
cut -f{field number} {file-name}

Use of Cut utility:
Selecting portion of a file.
Using (-f) option, you are specifying the extraction field number.
cut -f2 sname 
Vivek
Renuka
Prakash
Ashish
Rani

cut -f1 sname
11
12
13
14
15

Putting lines together using paste utility
General Syntax of paste utility:
Syntax:
paste {file1} {file2}
Use of paste utility:
Putting lines together.

$ paste sname smark
11 	Vivek 	11 	67
12 	Renuka 	12 	55
13 	Prakash 13 	96
14 	Ashish 	14 	36
15 	Rani   	15 	67


The join utility
General Syntax of join utility:
Syntax:
join {file1} {file2}
Use of join utility:
The join utility joins, lines from separate files.

$join sname smark
11 	Vivek 	67
12 	Renuka 	55
13 	Prakash 96
14 	Ashish 	36
15 	Rani 	67

Here students names are matched with their appropriate marks. How ? join utility uses the Sr.No. field to join to files. Notice that Sr.No. is the first field in both sname and smark file.

Note that join will only work, if there is common field in both file and if values are identical to each other.

Translateing range of characters using tr utility:-



AWK Command:
Awk is one of the most powerful tools in Unix used for processing the rows and columns in a file.
Syntax: awk 'BEGIN {start_action} {action} END {stop_action}' filename

1. awk '{print $1}' input_file
Here $1 has a meaning. $1, $2, $3... represents the first, second, third columns... in a row respectively. This awk command will print the first column in each row.
$0 will print entire line.

2. awk 'BEGIN {SUM=0} {SUM=SUM+$5} END {print $5}' input_file
There are few points to observe.
1. In the Begin block the variable sum is assigned with value 0.
2. In the next block the value of 5th column is added to the sum variable. This addition of the 5th column to the sum variable repeats for every row it processed. 
3. When all the rows are processed the sum variable will hold the sum of the values in the 5th column
4. This value is printed in the End block.

3. In this example we will see how to execute the awk script written in a file. Create a file sum_column and paste the below script in that file

#!/usr/bin/awk -f
BEGIN {sum=0} 
{sum=sum+$5} 
END {print sum}

Now execute the the script using awk command as 
awk -f sum_column input_file.

4.  awk '{ if($9 == "t4") print $0;}' input_file
This awk command checks for the string "t4" in the 9th column and if it finds a match then it will print the entire line. 

5. awk 'BEGIN { for(i=1;i<=5;i++) print "square of", i, "is",i*i; }'

This will print the squares of first numbers from 1 to 5.

AWK Built in Variables:
FS - Input field separator variable: 
By default Awk assumes that fields in a file are separted by space characters. If the fields in the file are separted by any other character, we can use the FS variable to tell about the delimiter. 

6. awk 'BEGIN {FS=":"} {print $2}' input_file
OR
awk -F: '{print $2}' input_file

OFS - Output field separator variable: 
By default using print statement the fields are displayed with space character as delimiter.
We can change this default behavior using the OFS variable as
awk 'BEGIN {OFS=":"} {print $4,$5}' input_file
center:0
center:17
center:26
center:25
center:43
Note: print $4,$5 and print $4$5 will not work the same way. The first one displays the output with space as delimiter. The second one displays the output without any delimiter. 

NF - Number of fileds variable:
8. awk '{print NF}' input_file
This will display the number of columns in each row.

NR - number of records variable: 
9. awk '{print NR}' input_file
This will display the line numbers from 1.

10. awk 'END {print NR}' input_file
This will display the total number of lines in the file.

String functions in Awk:
Some of the string functions in awk are:
index(string,search)
length(string)
split(string,array,separator)
substr(string,position)
substr(string,position,max)
tolower(string)
toupper(string)


SED: Sed is a stream Editor used for modifying files in unix. 
>cat file.txt
unix is great os. unix is opensource. unix is free os.
learn operating system.
unixlinux which one you choose.

1. Replacing or substituting string: Sed command is mostly used to replace the text in a file.
sed 's/unix/linux/' file.txt
linux is great os. unix is opensource. unix is free os.
learn operating system.
linuxlinux which one you choose.

Here the "s" specifies the substitution operation. The "/" are delimiters. The "unix" is the search pattern and the "linux" is the replacement string.

2. Replacing the nth occurrence of a pattern in a line.
Use the /1, /2 etc flags to replace the first, second occurrence of a pattern in a line.
>sed 's/unix/linux/2' file.txt

3. Replacing all the occurrence of the pattern in a line.
The substitute flag /g (global replacement) specifies the sed command to replace all the occurrences of the string in the line.

4. Replacing from nth occurrence to all occurrences in a line.
Use the combination of /1, /2 etc and /g to replace all the patterns from the nth occurrence of a pattern in a line.
sed 's/unix/linux/3g' file.txt

5. Changing the slash (/) delimiter
>sed 's/http:\/\//www/' file.txt
Using too many backslashes makes the sed command look awkward. In this case we can change the delimiter to another character as shown in the below example.

>sed 's_http://_www_' file.txt
>sed 's|http://|www|' file.txt

6. Using & as the matched string: There might be cases where you want to search for the pattern and replace that pattern by adding some extra characters to it. In such cases & comes in handy. The & represents the matched string.
>sed 's/unix/{&}/' file.txt

7. Using \1,\2 and so on to \9
The first pair of parenthesis specified in the pattern represents the \1, the second represents the \2 and so on.
sed 's/\(unix\)/\1\1/' file.txt

8. Duplicating the replaced line with /p flag
>sed 's/unix/linux/p' file.txt
The /p print flag prints the replaced line twice on the terminal. 

9. Printing only the replaced lines
Use the -n option along with the /p print flag to display only the replaced lines.
>sed -n 's/unix/linux/p' file.txt

10. Running multiple sed commands.
>sed 's/unix/linux/' file.txt| sed 's/os/system/'

11. Replacing string on a specific line number.
sed '3 s/unix/linux/' file.txt
>sed '1,3 s/unix/linux/' file.txt  (Replacing string on a range of lines.)


17. Add a line after a match.
The sed command can add a new line after a pattern match is found. The "a" command to sed tells it to add a new line after a match is found.
sed '/unix/ a "add a new line" file.txt

18. Add a line before a match
sed '/unix/ i "add a new line before match" file.txt

19. change a line
sed '/unix/ c "change line" file.txt

20. Transform like tr command
The sed command can be used to convert lower case letters to upper case letters by using transform y option.
>sed 'y/ul/UL/' file.txt





#!/bin/bash -e
# find commit from tag
git log --decorate --oneline |grep tag:\ ${1}


Find:
Find command is used for searching the files in a directory hierarchy.

1. find -name "sum.java" or find -iname "sum.java" (-i will ignore the case).
This will find all the files with name "sum.java" in the current directory and sub-directories.

2. find -maxdepth 1 -name "sum.java"
This will find for the file "sum.java" in the current directory only

3. find -name "*java*"
It displayed all the files which have the word "java" in the filename

4. find /etc -name "*java*" (This command will find files in specific directory here its /etc)
This will look for the files in the /etc directory with "java" in the filename

5.find -not -name "sum.java"
This is like inverting the match. It prints all the files except the given file "sum.java".

6. find -maxdepth 2 -name "sum.java"
 To print the files in the current directory and one level down to the current directory
 
7. find -mindepth 2 -maxdepth 5 -name "sum.java"
To print the files in the subdirectories between level 1 and 4

8. To find the largest file in the current directory and sub directories
	find . -type f -exec ls -s {}\; | sort -n -r | head -1
	"find . -type f -exec ls -s {} \;": This command will list all files along with size of file.
	sort command will sort files based on the size.
	head command will pick only first line from output of sort.

9. To find the smallest file in the current directory and sub directories
    find . -type f -exec ls -l {} \;| sort -n -r | tail -1

10. How to find files based on the file type.
	find . -type s (Finding socket files)
	find . -type d (Finding directories)
	find . -type d -name ".*" (Finding hidden directories)
	find . -type f (finding regular files)

11. How to find files based on the size
	find . -size  10M (Finding files whose size is exactly 10M)
	find . -size +10M (Finding files larger than 10M size)
	find . -size -10M (Finding files smaller than 10M size)

12. Find the files which are modified after the modification of a give file.
    find -newer "sum.java"  This command display all files which are modified after file "sum.java"
    find -anewer "sum.java" Display the files which are accessed after the modification of a give file
    find -cnewer "sum.java" Display files which are changed after modification of a given file.

13. Find the files based on the file permissions
	find . -perm 777
	
14. File based on time.
    find . -mmin -30	files which are modified within 30 minutes.
	find . -mtime -1 	files which are modified within 1 day
	find . -not -mmin 	files modified 30 minutes back
	find . -not -mtime -1 files modified 1 day back
	find . -amin -60 	files accessed within 1 hour.
	find . -atime -1 	files modified within 1 day.
	find . -cmin -120 	files changed within 2 hours.
	find . -ctime -2 	files changed withing 2 days.

15. To find files which are created between two files.
	find . -cnewer f1 -and ! -cnewer f2

16. Find the permissions of files which contain name "java"?
	find -name "*java*" -exec ls -l {} \;

17. find files which have name "java" in it and then display only files which have "class" word in them.
    find -name "*java*" -exec grep -H class {} \;
	
18. Remove files which contain name "java"
    find -name "*java*" -exec rm -r {} \;
	
pdiff
!/bin/sh
## proceed with profile diff
## to handle profile commit message and associated issues
## to be runned inside profile repo

do_msg() {
    if [ -z "${skip_prompt}" ]; then
        echo "$@"
    fi
}

skip_commit=
skip_prompt=
skip_plog=

diff_args=
diff_issues=
while [ $# -gt 0 ]; do
    case "$1" in
        -l ) skip_plog=1 ;;
        -c ) skip_commit=1 ;;
        -p ) skip_prompt=1 diff_args="${diff_args}p" ;;
        -s ) diff_args="${diff_args}s" ;;
        -u ) diff_args="${diff_args}u" ;;
        -v ) diff_args="${diff_args}v" ;;
        *  ) diff_issues="${diff_issues} $1" ;;
    esac
    shift
done

diff_test=$(git diff 2>/dev/null)
if [ $? -gt 0 ]; then
    >&2 echo "no diff..."
    return 1
fi
diff_file=$(git diff --name-only 2>/dev/null |head -n 1)
if [ -z "${diff_file}" ]; then
    >&2 echo "no diff..."
    return 1
fi

if [ -z "${skip_prompt}" ]; then
    git diff --unified=0 --ignore-space-at-eol --shortstat
fi

diff_issues=$(echo "${diff_issues}" |tr -d " ")
[ -n "$diff_issues" ] && diff_issues_msg="#$diff_issues"
diff_pkg=$(git diff |grep ^+= |sed "s/^+=/=/g" |sort -u)
diff_msg="${diff_file}: ${diff_pkg} ${diff_issues_msg}"
diff_args="-y${diff_args}"
if [ -z "${skip_plog}" ]; then
    #~ plog ${diff_args} ${diff_issues} -m "${diff_msg}"
    plog ${diff_args} ${diff_issues}
fi

if [ -z "${skip_commit}" -a -z "${skip_prompt}" ]; then
    echo "git add . && git commit -m \"${diff_msg}\""
    echo "[enter] for confirming msg or type new one"
    echo "[-c] for skipping commit"
    read -p "? " diff_prompt
    [ -n "${diff_prompt}" ] && diff_msg=${diff_prompt}
    [ "${diff_prompt}" = "-c" ] && skip_commit=1
fi

if [ -z "${skip_commit}" ]; then
    #~ echo "git add . && git commit -m \"${diff_msg}\""
    git add . && git commit -m "${diff_msg}"
fi
	

vig
#!/bin/bash
## vi $(grep ARG) wrapper for editing profile
## and optionally wrapping it to pdiff
## vig path_to/component-X [REDMINE_ID [-s: for status only]]
#~ set -x
GREP_OPT='--devices=skip --binary-files=without-match --color=auto'
for pattern in .cvs .git .hg .svn metadata; do
    GREP_OPT="$GREP_OPT --exclude=$pattern"
done
p_dir=profile
[ -d profiles ] && p_dir=profiles
vi $(grep $GREP_OPT -rn $1 $p_dir/)
if [ $# -gt 1 ]; then
    pdiff $2 $3
fi
~       	

GREP:
Grep stands for Global search for Regular Expressions and Print.

1. grep -i "error" logfile.txt  (Search for a string "error" with case in-sensitive in a file logfile.txt)
2. grep "error" file1 file2 	(searching for a string in multiple file)

Specifying the search string as a regular expression pattern.
	grep "^[0-9].*" file.txt  	(This will search for the lines which starts with a number.)
3. grep -w "word" file.txt 		(checking for whole word).
4. grep -B 2 "error" file.txt 	(print matched lines along with two lines before matched lines)
5. grep -A 3 "error" file.txt	(print matched lines along with three lines after the matched lines)
6. grep -C 5 "error" file.txt 	(This will display the matched lines and also five lines before and after the matched lines.)

Searching in all files
7. grep -r "string" * 			(You can search for a string in all the files under the current directory and sub-directories with the help -r option)
8. grep -v "string" file.txt	(Display lines that are not matched with specified search string pattern using -v option)
9. grep -v "^$" file.txt 		(Displaying non-empty lines)
10. grep -c "string" file.txt 	(Display count of number of matches)
11. grep -l "string" * 			(Display file names that matches pattern)
12. grep -L "string" * 			(Display files which do not contain matched string/pattern)
13. grep -o "string" file.txt	(Displaying only the matched pattern. By default, grep displays the entire line which has the matched string. We can make the grep to display only the matched string by using the -o option.)
14. grep -n "string" file.txt	(Display the line number)
15. grep -o -b "string" file.txt (Display position of matched string in a file. The -b option allows the grep command to display the character position of the matched string in a file.)
16. grep "^start" file.txt 		(Matching the lines that start with a string, The ^ regular expression pattern specifies the start of a line.)
17. grep "end$" file.txt 		(Matching the lines that end with a string, The $ regular expression pattern specifies the end of a line.).
